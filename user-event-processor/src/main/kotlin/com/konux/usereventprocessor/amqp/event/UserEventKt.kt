//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: user_event.proto

package com.konux.usereventprocessor.amqp.event;

@kotlin.jvm.JvmSynthetic
public inline fun userEvent(block: com.konux.usereventprocessor.amqp.event.UserEventKt.Dsl.() -> kotlin.Unit): com.konux.usereventprocessor.amqp.event.UserEvent =
  com.konux.usereventprocessor.amqp.event.UserEventKt.Dsl._create(com.konux.usereventprocessor.amqp.event.UserEvent.newBuilder()).apply { block() }._build()
public object UserEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: com.konux.usereventprocessor.amqp.event.UserEvent.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: com.konux.usereventprocessor.amqp.event.UserEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): com.konux.usereventprocessor.amqp.event.UserEvent = _builder.build()

    /**
     * <code>optional int64 timestamp = 1;</code>
     */
    public var timestamp: kotlin.Long
      @JvmName("getTimestamp")
      get() = _builder.getTimestamp()
      @JvmName("setTimestamp")
      set(value) {
        _builder.setTimestamp(value)
      }
    /**
     * <code>optional int64 timestamp = 1;</code>
     */
    public fun clearTimestamp() {
      _builder.clearTimestamp()
    }
    /**
     * <code>optional int64 timestamp = 1;</code>
     * @return Whether the timestamp field is set.
     */
    public fun hasTimestamp(): kotlin.Boolean {
      return _builder.hasTimestamp()
    }

    /**
     * <code>optional int64 userId = 2;</code>
     */
    public var userId: kotlin.Long
      @JvmName("getUserId")
      get() = _builder.getUserId()
      @JvmName("setUserId")
      set(value) {
        _builder.setUserId(value)
      }
    /**
     * <code>optional int64 userId = 2;</code>
     */
    public fun clearUserId() {
      _builder.clearUserId()
    }
    /**
     * <code>optional int64 userId = 2;</code>
     * @return Whether the userId field is set.
     */
    public fun hasUserId(): kotlin.Boolean {
      return _builder.hasUserId()
    }

    /**
     * <code>optional string message = 3;</code>
     */
    public var message: kotlin.String
      @JvmName("getMessage")
      get() = _builder.getMessage()
      @JvmName("setMessage")
      set(value) {
        _builder.setMessage(value)
      }
    /**
     * <code>optional string message = 3;</code>
     */
    public fun clearMessage() {
      _builder.clearMessage()
    }
    /**
     * <code>optional string message = 3;</code>
     * @return Whether the message field is set.
     */
    public fun hasMessage(): kotlin.Boolean {
      return _builder.hasMessage()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun com.konux.usereventprocessor.amqp.event.UserEvent.copy(block: com.konux.usereventprocessor.amqp.event.UserEventKt.Dsl.() -> kotlin.Unit): com.konux.usereventprocessor.amqp.event.UserEvent =
  com.konux.usereventprocessor.amqp.event.UserEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()
